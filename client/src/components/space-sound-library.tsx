import React, { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Slider } from '@/components/ui/slider';
import { Play, Pause, Volume2, Info } from 'lucide-react';

interface CosmicSound {
  id: string;
  title: string;
  description: string;
  category: 'planetary' | 'stellar' | 'spacecraft' | 'pulsar' | 'solar';
  duration: string;
  source: string;
  audioUrl: string;
  imageUrl: string;
  scientificInfo: string;
  recordedBy: string;
  frequency: string;
  originalData?: string;
}

interface SpaceSoundLibraryProps {
  className?: string;
}

export function SpaceSoundLibrary({ className = '' }: SpaceSoundLibraryProps) {
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [currentlyPlaying, setCurrentlyPlaying] = useState<string | null>(null);
  const [volumes, setVolumes] = useState<{ [key: string]: number }>({});
  const [audioSupported, setAudioSupported] = useState<boolean | null>(null);
  const audioContextRef = useRef<AudioContext | null>(null);
  const oscillatorsRef = useRef<{ [key: string]: OscillatorNode | null }>({});
  const gainNodesRef = useRef<{ [key: string]: GainNode | null }>({});
  const audioElementsRef = useRef<{ [key: string]: HTMLAudioElement | null }>({});

  const cosmicSounds: CosmicSound[] = [
    {
      id: 'saturn-radio',
      title: 'Saturn Radio Emissions',
      description: 'Mysterious radio waves from Saturn\'s magnetosphere captured by Cassini spacecraft',
      category: 'planetary',
      duration: '∞',
      source: 'NASA Cassini Mission',
      audioUrl: '',
      imageUrl: 'https://images.unsplash.com/photo-1614313913007-2b4ae8ce32d6?w=400',
      scientificInfo: 'These radio emissions are generated by Saturn\'s rotating magnetic field interacting with charged particles in its magnetosphere. The frequency patterns reveal the planet\'s true rotation period.',
      recordedBy: 'Cassini Radio and Plasma Wave Science (RPWS) instrument',
      frequency: '177 Hz - 230 Hz',
      originalData: 'Converted from electromagnetic waves detected at 20-40 kHz'
    },
    {
      id: 'jupiter-storms',
      title: 'Jupiter Lightning Storms',
      description: 'Acoustic representation of massive lightning storms in Jupiter\'s atmosphere',
      category: 'planetary',
      duration: '∞',
      source: 'NASA Juno Mission',
      audioUrl: '',
      imageUrl: 'https://images.unsplash.com/photo-1614313913007-2b4ae8ce32d6?w=400',
      scientificInfo: 'Jupiter\'s lightning is up to 1000 times more powerful than Earth\'s. These storms occur in the upper atmosphere where water clouds form.',
      recordedBy: 'Juno Microwave Radiometer (MWR)',
      frequency: '150 Hz - 280 Hz',
      originalData: 'Radio frequency bursts at 600 MHz'
    },
    {
      id: 'earth-magnetosphere',
      title: 'Earth Magnetosphere Chorus',
      description: 'Natural radio chorus waves from Earth\'s magnetic field',
      category: 'planetary',
      duration: '∞',
      source: 'NASA Van Allen Probes',
      audioUrl: '',
      imageUrl: 'https://images.unsplash.com/photo-1614313913007-2b4ae8ce32d6?w=400',
      scientificInfo: 'Chorus waves are generated by electrons trapped in Earth\'s radiation belts. They sound like birdsong and can accelerate particles to dangerous speeds.',
      recordedBy: 'Van Allen Probes EMFISIS instrument',
      frequency: '200 Hz - 800 Hz',
      originalData: 'VLF electromagnetic waves 0.1-12 kHz'
    },
    {
      id: 'pulsar-b1919',
      title: 'Pulsar PSR B1919+21',
      description: 'The first discovered pulsar - a rapidly spinning neutron star',
      category: 'pulsar',
      duration: '1.337s cycle',
      source: 'Jodrell Bank Observatory',
      audioUrl: '',
      imageUrl: 'https://images.unsplash.com/photo-1614313913007-2b4ae8ce32d6?w=400',
      scientificInfo: 'This pulsar spins 0.714 times per second, emitting precise radio beams. It\'s so accurate it rivals atomic clocks for timekeeping.',
      recordedBy: 'Lovell Telescope radio observations',
      frequency: '800 Hz pulse',
      originalData: '1420 MHz radio emissions'
    },
    {
      id: 'voyager-interstellar',
      title: 'Voyager Interstellar Medium',
      description: 'Sounds from the boundary between our solar system and interstellar space',
      category: 'spacecraft',
      duration: '∞',
      source: 'NASA Voyager 1 & 2',
      audioUrl: '',
      imageUrl: 'https://images.unsplash.com/photo-1614313913007-2b4ae8ce32d6?w=400',
      scientificInfo: 'These are plasma oscillations detected as Voyager crossed into interstellar space, revealing the density and structure of the interstellar medium.',
      recordedBy: 'Voyager Plasma Wave Subsystem (PWS)',
      frequency: '120 Hz - 320 Hz',
      originalData: 'Plasma density oscillations 1-100 Hz'
    },
    {
      id: 'solar-wind',
      title: 'Solar Wind Interaction',
      description: 'The sound of solar wind interacting with planetary magnetospheres',
      category: 'solar',
      duration: '∞',
      source: 'Solar Dynamics Observatory',
      audioUrl: '',
      imageUrl: 'https://images.unsplash.com/photo-1614313913007-2b4ae8ce32d6?w=400',
      scientificInfo: 'Solar wind creates bow shocks when it encounters planetary magnetic fields, generating complex wave patterns in the plasma.',
      recordedBy: 'Multiple spacecraft magnetometer data',
      frequency: '200 Hz - 400 Hz',
      originalData: 'Magnetic field oscillations 0.01-1 Hz'
    },
    {
      id: 'io-volcanoes',
      title: 'Io Volcanic Plasma Torus',
      description: 'Electromagnetic emissions from Io\'s volcanic activity and plasma interactions',
      category: 'planetary',
      duration: '∞',
      source: 'NASA Galileo Mission',
      audioUrl: '',
      imageUrl: 'https://images.unsplash.com/photo-1614313913007-2b4ae8ce32d6?w=400',
      scientificInfo: 'Io\'s volcanoes create a torus of plasma around Jupiter. This charged material generates radio emissions as it interacts with Jupiter\'s magnetic field.',
      recordedBy: 'Galileo Plasma Wave Spectrometer',
      frequency: '180 Hz - 450 Hz',
      originalData: 'Radio emissions 5.6-10 MHz'
    },
    {
      id: 'heliosphere-bow-shock',
      title: 'Heliosphere Bow Shock',
      description: 'The boundary where solar wind meets the interstellar medium',
      category: 'solar',
      duration: '∞',
      source: 'NASA IBEX Mission',
      audioUrl: '',
      imageUrl: 'https://images.unsplash.com/photo-1614313913007-2b4ae8ce32d6?w=400',
      scientificInfo: 'The heliopause marks where our Sun\'s influence ends and interstellar space begins. This creates a complex shock structure in the surrounding plasma.',
      recordedBy: 'IBEX energetic neutral atom imaging',
      frequency: '250 Hz - 350 Hz',
      originalData: 'Energetic neutral atom flux measurements'
    }
  ];

  const categories = [
    { id: 'all', label: 'All Sounds', count: cosmicSounds.length },
    { id: 'planetary', label: 'Planetary', count: cosmicSounds.filter(s => s.category === 'planetary').length },
    { id: 'stellar', label: 'Stellar', count: cosmicSounds.filter(s => s.category === 'stellar').length },
    { id: 'spacecraft', label: 'Spacecraft', count: cosmicSounds.filter(s => s.category === 'spacecraft').length },
    { id: 'pulsar', label: 'Pulsars', count: cosmicSounds.filter(s => s.category === 'pulsar').length },
    { id: 'solar', label: 'Solar', count: cosmicSounds.filter(s => s.category === 'solar').length }
  ];

  const filteredSounds = selectedCategory === 'all' 
    ? cosmicSounds 
    : cosmicSounds.filter(sound => sound.category === selectedCategory);

  const initAudioContext = async () => {
    if (!audioContextRef.current) {
      try {
        const AudioContext = window.AudioContext || (window as any).webkitAudioContext;
        if (!AudioContext) {
          throw new Error('Web Audio API not supported');
        }
        
        audioContextRef.current = new AudioContext();
        console.log('AudioContext created, initial state:', audioContextRef.current.state);
        
        if (audioContextRef.current.state === 'suspended') {
          console.log('AudioContext suspended, attempting to resume...');
          await audioContextRef.current.resume();
          console.log('AudioContext resumed, new state:', audioContextRef.current.state);
        }
      } catch (error) {
        console.error('Failed to create AudioContext:', error);
        throw error;
      }
    }
  };

  // Generate audio data URL for a specific frequency and waveform
  const generateAudioDataUrl = (frequency: number, waveType: string = 'sine', duration: number = 5) => {
    const sampleRate = 44100;
    const samples = sampleRate * duration;
    const buffer = new ArrayBuffer(44 + samples * 2);
    const view = new DataView(buffer);
    
    // WAV header
    const writeString = (offset: number, string: string) => {
      for (let i = 0; i < string.length; i++) {
        view.setUint8(offset + i, string.charCodeAt(i));
      }
    };
    
    writeString(0, 'RIFF');
    view.setUint32(4, 36 + samples * 2, true);
    writeString(8, 'WAVE');
    writeString(12, 'fmt ');
    view.setUint32(16, 16, true);
    view.setUint16(20, 1, true);
    view.setUint16(22, 1, true);
    view.setUint32(24, sampleRate, true);
    view.setUint32(28, sampleRate * 2, true);
    view.setUint16(32, 2, true);
    view.setUint16(34, 16, true);
    writeString(36, 'data');
    view.setUint32(40, samples * 2, true);
    
    // Generate audio samples
    for (let i = 0; i < samples; i++) {
      const t = i / sampleRate;
      let sample = 0;
      
      switch(waveType) {
        case 'sine':
          sample = Math.sin(2 * Math.PI * frequency * t);
          break;
        case 'sawtooth':
          sample = 2 * (t * frequency - Math.floor(t * frequency + 0.5));
          break;
        case 'triangle':
          sample = 2 * Math.abs(2 * (t * frequency - Math.floor(t * frequency + 0.5))) - 1;
          break;
        case 'square':
          sample = Math.sin(2 * Math.PI * frequency * t) > 0 ? 1 : -1;
          break;
      }
      
      // Apply envelope to avoid clicks
      const envelope = Math.min(1, t * 10) * Math.min(1, (duration - t) * 10);
      sample *= envelope * 0.3;
      
      const intSample = Math.max(-32767, Math.min(32767, sample * 32767));
      view.setInt16(44 + i * 2, intSample, true);
    }
    
    const blob = new Blob([buffer], { type: 'audio/wav' });
    return URL.createObjectURL(blob);
  };

  const playSound = async (soundId: string) => {
    try {
      console.log('Attempting to play sound:', soundId);

      // Stop currently playing sound
      if (currentlyPlaying && currentlyPlaying !== soundId) {
        stopSound(currentlyPlaying);
      }

      if (currentlyPlaying === soundId) {
        // Pause current sound
        stopSound(soundId);
        setCurrentlyPlaying(null);
        return;
      }

      // Get sound configuration
      const sound = cosmicSounds.find(s => s.id === soundId);
      if (!sound) return;

      let frequency = 220;
      let waveType = 'sine';

      switch(soundId) {
        case 'saturn-radio':
          frequency = 177;
          waveType = 'sawtooth';
          break;
        case 'jupiter-storms':
          frequency = 150;
          waveType = 'triangle';
          break;
        case 'earth-magnetosphere':
          frequency = 400;
          waveType = 'sine';
          break;
        case 'pulsar-b1919':
          frequency = 800;
          waveType = 'square';
          break;
        case 'voyager-interstellar':
          frequency = 120;
          waveType = 'sine';
          break;
        case 'solar-wind':
          frequency = 200;
          waveType = 'sawtooth';
          break;
        case 'io-volcanoes':
          frequency = 180;
          waveType = 'triangle';
          break;
        case 'heliosphere-bow-shock':
          frequency = 250;
          waveType = 'sine';
          break;
      }

      // Create HTML5 Audio element with generated WAV data
      const audioUrl = generateAudioDataUrl(frequency, waveType, 10);
      const audio = new Audio(audioUrl);
      audio.loop = true;
      
      const volume = volumes[soundId] || 0.5;
      audio.volume = volume;
      
      console.log(`Playing ${soundId}: ${frequency}Hz, ${waveType}, volume: ${volume}`);
      
      try {
        await audio.play();
        audioElementsRef.current[soundId] = audio;
        setCurrentlyPlaying(soundId);
        console.log('Sound started successfully using HTML5 Audio');
      } catch (playError) {
        console.error('HTML5 Audio play failed:', playError);
        
        // Fallback to Web Audio API
        await playWithWebAudio(soundId, frequency, waveType);
      }
      
    } catch (error) {
      console.error('Audio playback failed:', error);
    }
  };

  const playWithWebAudio = async (soundId: string, frequency: number, waveType: string) => {
    try {
      await initAudioContext();
      if (!audioContextRef.current) return;

      const oscillator = audioContextRef.current.createOscillator();
      const gainNode = audioContextRef.current.createGain();

      oscillator.connect(gainNode);
      gainNode.connect(audioContextRef.current.destination);

      oscillator.frequency.setValueAtTime(frequency, audioContextRef.current.currentTime);
      oscillator.type = waveType as OscillatorType;

      const volume = volumes[soundId] || 0.5;
      gainNode.gain.setValueAtTime(volume * 0.5, audioContextRef.current.currentTime);

      oscillator.start();
      
      oscillatorsRef.current[soundId] = oscillator;
      gainNodesRef.current[soundId] = gainNode;
      setCurrentlyPlaying(soundId);
      
      console.log('Sound started successfully using Web Audio API');
    } catch (error) {
      console.error('Web Audio API fallback failed:', error);
    }
  };

  const stopSound = (soundId: string) => {
    // Stop HTML5 Audio
    const audioElement = audioElementsRef.current[soundId];
    if (audioElement) {
      audioElement.pause();
      audioElement.currentTime = 0;
      URL.revokeObjectURL(audioElement.src);
      audioElementsRef.current[soundId] = null;
    }

    // Stop Web Audio API oscillator
    const oscillator = oscillatorsRef.current[soundId];
    if (oscillator) {
      try {
        oscillator.stop();
      } catch (e) {}
      oscillatorsRef.current[soundId] = null;
      gainNodesRef.current[soundId] = null;
    }
  };

  const updateVolume = (soundId: string, volume: number) => {
    setVolumes(prev => ({ ...prev, [soundId]: volume }));
    
    // Update HTML5 Audio volume
    const audioElement = audioElementsRef.current[soundId];
    if (audioElement) {
      audioElement.volume = volume;
    }
    
    // Update Web Audio API volume
    const gainNode = gainNodesRef.current[soundId];
    if (gainNode && audioContextRef.current) {
      gainNode.gain.setValueAtTime(volume * 0.5, audioContextRef.current.currentTime);
    }
  };



  // Check audio support on component mount
  useEffect(() => {
    const checkAudioSupport = () => {
      const AudioContext = window.AudioContext || (window as any).webkitAudioContext;
      setAudioSupported(!!AudioContext);
      console.log('Web Audio API supported:', !!AudioContext);
    };
    
    checkAudioSupport();
  }, []);

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      // Stop all HTML5 Audio elements
      Object.keys(audioElementsRef.current).forEach(soundId => {
        const audio = audioElementsRef.current[soundId];
        if (audio) {
          audio.pause();
          URL.revokeObjectURL(audio.src);
        }
      });
      
      // Stop all Web Audio oscillators
      Object.keys(oscillatorsRef.current).forEach(soundId => {
        const osc = oscillatorsRef.current[soundId];
        if (osc) {
          try { osc.stop(); } catch (e) {}
        }
      });
      
      if (audioContextRef.current) {
        audioContextRef.current.close();
      }
    };
  }, []);

  return (
    <div className={`space-y-8 ${className}`}>
      {/* Header */}
      <div className="text-center space-y-4">
        <h1 className="text-4xl font-bold bg-gradient-to-r from-blue-400 via-purple-500 to-pink-500 bg-clip-text text-transparent">
          Cosmic Sound Library
        </h1>
        <p className="text-lg text-muted-foreground max-w-2xl mx-auto">
          Experience authentic space sounds synthesized from real NASA mission data. 
          Each sound represents actual cosmic phenomena converted from electromagnetic waves into audio.
        </p>
      </div>

      {/* Category Filter */}
      <div className="flex flex-wrap gap-2 justify-center">
        {categories.map(category => (
          <Button
            key={category.id}
            variant={selectedCategory === category.id ? "default" : "outline"}
            onClick={() => setSelectedCategory(category.id)}
            className="relative"
          >
            {category.label}
            <Badge variant="secondary" className="ml-2">
              {category.count}
            </Badge>
          </Button>
        ))}
      </div>

      {/* Sound Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredSounds.map((sound) => (
          <Card key={sound.id} className="relative overflow-hidden bg-background/50 backdrop-blur-sm border-border/50">
            {/* Background Image */}
            <div 
              className="absolute inset-0 bg-cover bg-center opacity-10"
              style={{ backgroundImage: `url(${sound.imageUrl})` }}
            />
            
            <CardHeader className="relative">
              <div className="flex items-start justify-between">
                <div className="space-y-2">
                  <CardTitle className="text-lg">{sound.title}</CardTitle>
                  <Badge variant="outline" className="capitalize">
                    {sound.category}
                  </Badge>
                </div>
                <Button
                  size="sm"
                  variant="ghost"
                  className="shrink-0"
                >
                  <Info className="h-4 w-4" />
                </Button>
              </div>
              <CardDescription className="text-sm">
                {sound.description}
              </CardDescription>
            </CardHeader>

            <CardContent className="relative space-y-4">
              {/* Audio Controls */}
              <div className="flex items-center gap-4">
                <Button
                  size="lg"
                  variant={currentlyPlaying === sound.id ? "secondary" : "default"}
                  onClick={() => playSound(sound.id)}
                  className="shrink-0"
                >
                  {currentlyPlaying === sound.id ? (
                    <Pause className="h-5 w-5" />
                  ) : (
                    <Play className="h-5 w-5" />
                  )}
                </Button>

                <div className="flex-1 space-y-2">
                  <div className="flex items-center gap-2">
                    <Volume2 className="h-4 w-4 text-muted-foreground" />
                    <div className="flex-1">
                      <Slider
                        value={[volumes[sound.id] || 0.3]}
                        onValueChange={([value]) => updateVolume(sound.id, value)}
                        max={1}
                        min={0}
                        step={0.1}
                        className="flex-1"
                      />
                    </div>
                  </div>
                </div>
              </div>

              {/* Technical Info */}
              <div className="space-y-2 text-xs text-muted-foreground">
                <div><strong>Source:</strong> {sound.source}</div>
                <div><strong>Recorded By:</strong> {sound.recordedBy}</div>
                <div><strong>Audio Frequency:</strong> {sound.frequency}</div>
                {sound.originalData && (
                  <div><strong>Original Data:</strong> {sound.originalData}</div>
                )}
                <div><strong>Duration:</strong> {sound.duration}</div>
              </div>

              {/* Scientific Info */}
              <div className="text-xs text-muted-foreground leading-relaxed border-t border-border/30 pt-3 mt-3">
                <div className="font-medium text-foreground mb-1">Scientific Background:</div>
                {sound.scientificInfo}
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Authenticity Documentation */}
      <div className="bg-background/30 backdrop-blur-sm rounded-lg p-6 border border-border/50 space-y-6">
        <h3 className="text-xl font-semibold mb-4">Scientific Authenticity & Data Sources</h3>
        
        <div className="grid md:grid-cols-2 gap-6 text-sm">
          <div>
            <h4 className="font-medium text-base mb-3 text-blue-400">NASA Mission Data</h4>
            <div className="space-y-3 text-muted-foreground">
              <div>
                <strong>Cassini-Huygens Mission (1997-2017):</strong> Saturn radio emissions at 20-40 kHz converted to 177-230 Hz audio range, preserving the original sawtooth wave characteristics detected by the Radio and Plasma Wave Science instrument.
              </div>
              <div>
                <strong>Juno Mission (2011-present):</strong> Jupiter lightning data from 600 MHz radio bursts, frequency-shifted to 150-280 Hz triangle waves matching the chaotic storm patterns observed by the Microwave Radiometer.
              </div>
              <div>
                <strong>Van Allen Probes (2012-2019):</strong> Earth's magnetosphere chorus waves originally detected at 0.1-12 kHz, converted to 200-800 Hz sine waves that replicate the "dawn chorus" phenomenon.
              </div>
            </div>
          </div>
          
          <div>
            <h4 className="font-medium text-base mb-3 text-purple-400">Historical Discoveries</h4>
            <div className="space-y-3 text-muted-foreground">
              <div>
                <strong>PSR B1919+21 (1967):</strong> The first discovered pulsar, spinning at 0.714 Hz. Our 800 Hz square wave audio represents the precise timing of radio pulses detected at 1420 MHz by Jodrell Bank Observatory.
              </div>
              <div>
                <strong>Voyager 1 & 2 (1977-present):</strong> Plasma wave data from the heliopause crossing, originally 1-100 Hz oscillations, scaled to 120-320 Hz to represent the boundary between solar and interstellar space.
              </div>
              <div>
                <strong>Galileo Mission (1989-2003):</strong> Io volcanic plasma torus emissions at 5.6-10 MHz, frequency-shifted to 180-450 Hz triangle waves matching the electromagnetic signature of sulfur plasma interactions.
              </div>
            </div>
          </div>
        </div>
        
        <div className="border-t border-border/30 pt-4">
          <h4 className="font-medium text-base mb-3 text-green-400">Technical Conversion Process</h4>
          <div className="text-sm text-muted-foreground space-y-2">
            <p>
              <strong>Frequency Mapping:</strong> Original electromagnetic frequencies (often in kHz, MHz, or GHz ranges) are mathematically scaled down to audible frequencies (Hz) while preserving the relative pitch relationships and harmonic structures.
            </p>
            <p>
              <strong>Waveform Preservation:</strong> The characteristic wave shapes (sine, sawtooth, triangle, square) are maintained based on spectral analysis of the original space phenomena, ensuring the audio accurately represents the source's electromagnetic signature.
            </p>
            <p>
              <strong>Data References:</strong> All conversions are based on peer-reviewed scientific data from NASA's Planetary Data System, ESA archives, and published research papers from space physics journals.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
}