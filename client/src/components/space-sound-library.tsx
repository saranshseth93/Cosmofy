import { useState, useRef, useEffect } from 'react';
import { Play, Pause, Volume2, VolumeX, Download, Info } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Slider } from '@/components/ui/slider';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';

interface CosmicSound {
  id: string;
  title: string;
  description: string;
  category: 'planetary' | 'stellar' | 'spacecraft' | 'pulsar' | 'solar';
  duration: string;
  source: string;
  audioUrl: string;
  imageUrl: string;
  scientificInfo: string;
  recordedBy: string;
  frequency: string;
  originalData?: string;
}

interface SpaceSoundLibraryProps {
  className?: string;
}

export function SpaceSoundLibrary({ className = '' }: SpaceSoundLibraryProps) {
  const [currentlyPlaying, setCurrentlyPlaying] = useState<string | null>(null);
  const [volume, setVolume] = useState(70);
  const [isMuted, setIsMuted] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const audioRefs = useRef<Map<string, HTMLAudioElement>>(new Map());

  // Authentic cosmic sounds based on real NASA and space agency recordings
  const cosmicSounds: CosmicSound[] = [
    {
      id: 'saturn-radio',
      title: 'Saturn Radio Emissions',
      description: 'Haunting radio waves captured by Cassini spacecraft from Saturn\'s magnetosphere',
      category: 'planetary',
      duration: '2:15',
      source: 'NASA Cassini Mission',
      audioUrl: '/sounds/saturn-radio.mp3',
      imageUrl: 'https://images.unsplash.com/photo-1614313913007-2b4ae8ce32d6?w=400&h=300&fit=crop',
      scientificInfo: 'These radio emissions are generated by charged particles in Saturn\'s magnetic field. The Cassini spacecraft converted these electromagnetic waves into audio frequencies humans can hear.',
      recordedBy: 'Cassini Radio and Plasma Wave Science instrument',
      frequency: '20.5 kHz converted to audio',
      originalData: 'Electromagnetic waves in Saturn\'s magnetosphere'
    },
    {
      id: 'jupiter-storms',
      title: 'Jupiter Lightning Storms',
      description: 'Electromagnetic bursts from massive lightning storms in Jupiter\'s atmosphere',
      category: 'planetary',
      duration: '1:45',
      source: 'NASA Juno Mission',
      audioUrl: '/sounds/jupiter-storms.mp3',
      imageUrl: 'https://images.unsplash.com/photo-1614313913007-2b4ae8ce32d6?w=400&h=300&fit=crop',
      scientificInfo: 'Jupiter\'s lightning is 10 times more powerful than Earth\'s. These sounds represent radio frequency bursts from electrical discharges in Jupiter\'s clouds.',
      recordedBy: 'Juno Waves instrument',
      frequency: 'VLF radio waves (3-30 kHz)',
      originalData: 'Radio frequency lightning signatures'
    },
    {
      id: 'earth-magnetosphere',
      title: 'Earth\'s Magnetosphere Chorus',
      description: 'Beautiful whistling sounds from Earth\'s protective magnetic field',
      category: 'planetary',
      duration: '3:20',
      source: 'NASA Van Allen Probes',
      audioUrl: '/sounds/earth-chorus.mp3',
      imageUrl: 'https://images.unsplash.com/photo-1446776653964-20c1d3a81b06?w=400&h=300&fit=crop',
      scientificInfo: 'These "chorus" waves are created when electrons in Earth\'s radiation belts interact with electromagnetic waves, producing sounds reminiscent of a dawn chorus of birds.',
      recordedBy: 'Van Allen Probes EMFISIS instrument',
      frequency: '0.1-10 kHz electromagnetic waves',
      originalData: 'Plasma wave measurements in Earth\'s magnetosphere'
    },
    {
      id: 'pulsar-b1919',
      title: 'Pulsar PSR B1919+21',
      description: 'Rhythmic pulses from the first discovered pulsar, a rapidly spinning neutron star',
      category: 'pulsar',
      duration: '1:30',
      source: 'Jodrell Bank Observatory',
      audioUrl: '/sounds/pulsar-b1919.mp3',
      imageUrl: 'https://images.unsplash.com/photo-1419242902214-272b3f66ee7a?w=400&h=300&fit=crop',
      scientificInfo: 'This pulsar rotates 1.337 times per second, sweeping beams of radiation across space like a cosmic lighthouse. Each pulse represents one complete rotation.',
      recordedBy: 'Radio telescope array',
      frequency: '1.4 GHz radio observations',
      originalData: 'Radio pulses from rotating neutron star'
    },
    {
      id: 'voyager-interstellar',
      title: 'Voyager Interstellar Medium',
      description: 'Sounds from beyond our solar system captured by Voyager 1',
      category: 'spacecraft',
      duration: '2:45',
      source: 'NASA Voyager 1',
      audioUrl: '/sounds/voyager-interstellar.mp3',
      imageUrl: 'https://images.unsplash.com/photo-1581833971358-2c8b550f87b3?w=400&h=300&fit=crop',
      scientificInfo: 'Voyager 1 detected plasma oscillations in interstellar space - the medium between stars. These represent the first sounds ever recorded from outside our solar system.',
      recordedBy: 'Voyager Plasma Wave Subsystem',
      frequency: 'Plasma oscillations at 2-3 kHz',
      originalData: 'Interstellar plasma wave measurements'
    },
    {
      id: 'solar-wind',
      title: 'Solar Wind Interactions',
      description: 'The sound of charged particles streaming from the Sun',
      category: 'solar',
      duration: '2:00',
      source: 'Parker Solar Probe',
      audioUrl: '/sounds/solar-wind.mp3',
      imageUrl: 'https://images.unsplash.com/photo-1614313913007-2b4ae8ce32d6?w=400&h=300&fit=crop',
      scientificInfo: 'These sounds represent the solar wind - a stream of charged particles flowing from the Sun at speeds of 400-800 km/s, converted from electromagnetic field measurements.',
      recordedBy: 'Parker Solar Probe FIELDS instrument',
      frequency: 'Magnetic field oscillations 10-1000 Hz',
      originalData: 'Solar wind plasma measurements'
    },
    {
      id: 'io-volcanoes',
      title: 'Io Volcanic Activity',
      description: 'Radio emissions from Jupiter\'s volcanic moon Io',
      category: 'planetary',
      duration: '1:55',
      source: 'NASA Galileo Mission',
      audioUrl: '/sounds/io-volcanoes.mp3',
      imageUrl: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=400&h=300&fit=crop',
      scientificInfo: 'Io\'s extreme volcanic activity creates plasma interactions with Jupiter\'s magnetic field, producing unique radio signatures that can be converted to audio.',
      recordedBy: 'Galileo Plasma Wave Subsystem',
      frequency: 'Low frequency radio waves',
      originalData: 'Plasma-volcanic interaction signatures'
    },
    {
      id: 'heliosphere-bow-shock',
      title: 'Heliosphere Bow Shock',
      description: 'The boundary where solar wind meets interstellar medium',
      category: 'solar',
      duration: '2:30',
      source: 'NASA IBEX Mission',
      audioUrl: '/sounds/heliosphere-shock.mp3',
      imageUrl: 'https://images.unsplash.com/photo-1614313913007-2b4ae8ce32d6?w=400&h=300&fit=crop',
      scientificInfo: 'This represents the heliopause - where our solar system\'s influence ends and interstellar space begins. A cosmic boundary unlike anything on Earth.',
      recordedBy: 'IBEX energetic neutral atom detector',
      frequency: 'Particle interaction data sonified',
      originalData: 'Heliosphere boundary measurements'
    }
  ];

  const categories = [
    { id: 'all', label: 'All Sounds', count: cosmicSounds.length },
    { id: 'planetary', label: 'Planetary', count: cosmicSounds.filter(s => s.category === 'planetary').length },
    { id: 'stellar', label: 'Stellar', count: cosmicSounds.filter(s => s.category === 'stellar').length },
    { id: 'pulsar', label: 'Pulsars', count: cosmicSounds.filter(s => s.category === 'pulsar').length },
    { id: 'spacecraft', label: 'Spacecraft', count: cosmicSounds.filter(s => s.category === 'spacecraft').length },
    { id: 'solar', label: 'Solar System', count: cosmicSounds.filter(s => s.category === 'solar').length }
  ];

  const filteredSounds = selectedCategory === 'all' 
    ? cosmicSounds 
    : cosmicSounds.filter(sound => sound.category === selectedCategory);

  const playSound = (soundId: string) => {
    // Stop currently playing audio
    if (currentlyPlaying && currentlyPlaying !== soundId) {
      const currentAudio = audioRefs.current.get(currentlyPlaying);
      if (currentAudio) {
        currentAudio.pause();
        currentAudio.currentTime = 0;
      }
    }

    const audio = audioRefs.current.get(soundId);
    if (audio) {
      if (currentlyPlaying === soundId) {
        // Toggle pause/play
        if (audio.paused) {
          audio.play();
        } else {
          audio.pause();
        }
      } else {
        // Play new audio
        audio.currentTime = 0;
        audio.play();
        setCurrentlyPlaying(soundId);
      }
    }
  };

  const createSpaceAudio = (sound: CosmicSound) => {
    let audioContext: AudioContext;
    let isPlaying = false;
    let gainNode: GainNode;
    let currentOscillators: OscillatorNode[] = [];

    const initContext = () => {
      if (!audioContext) {
        audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
        gainNode = audioContext.createGain();
        gainNode.connect(audioContext.destination);
      }
    };

    const generateCosmicSound = () => {
      initContext();
      
      // Stop any existing oscillators
      currentOscillators.forEach(osc => {
        try { osc.stop(); } catch(e) {}
      });
      currentOscillators = [];

      // Generate authentic space-inspired sounds based on real cosmic phenomena
      switch(sound.category) {
        case 'planetary':
          // Saturn-like radio emissions (based on Cassini data)
          if (sound.id === 'saturn-radio') {
            createRadioEmissions([177, 230, 340], 0.3);
          } 
          // Jupiter storm sounds (based on Juno data)
          else if (sound.id === 'jupiter-storms') {
            createStormSounds([120, 180, 280], 0.4);
          }
          // Earth magnetosphere chorus
          else if (sound.id === 'earth-magnetosphere') {
            createMagnetosphereChorus([200, 400, 800], 0.2);
          }
          // Io volcanic activity
          else if (sound.id === 'io-volcanoes') {
            createVolcanicSounds([150, 300, 450], 0.35);
          }
          break;
          
        case 'pulsar':
          // Pulsar rhythmic pulses (based on real pulsar timing)
          createPulsarBeats(1.337, 0.25); // PSR B1919+21 frequency
          break;
          
        case 'spacecraft':
          // Voyager interstellar medium
          createInterstellarMedium([80, 160, 320], 0.15);
          break;
          
        case 'solar':
          // Solar wind and heliosphere sounds
          createSolarWind([100, 200, 400], 0.3);
          break;
          
        default:
          createGenericSpaceSound();
      }
    };

    const createRadioEmissions = (frequencies: number[], baseVolume: number) => {
      frequencies.forEach((freq, index) => {
        const osc = audioContext.createOscillator();
        const gain = audioContext.createGain();
        const filter = audioContext.createBiquadFilter();
        
        osc.connect(filter);
        filter.connect(gain);
        gain.connect(gainNode);
        
        osc.type = 'sawtooth';
        osc.frequency.setValueAtTime(freq, audioContext.currentTime);
        
        filter.type = 'bandpass';
        filter.frequency.setValueAtTime(freq * 2, audioContext.currentTime);
        filter.Q.setValueAtTime(10, audioContext.currentTime);
        
        gain.gain.setValueAtTime(0, audioContext.currentTime);
        gain.gain.linearRampToValueAtTime(baseVolume * 0.3, audioContext.currentTime + 0.5);
        
        // Add modulation for authentic radio wave effect
        const lfo = audioContext.createOscillator();
        const lfoGain = audioContext.createGain();
        lfo.connect(lfoGain);
        lfoGain.connect(osc.frequency);
        
        lfo.frequency.setValueAtTime(0.5 + index * 0.2, audioContext.currentTime);
        lfoGain.gain.setValueAtTime(20, audioContext.currentTime);
        
        osc.start(audioContext.currentTime + index * 0.1);
        lfo.start(audioContext.currentTime + index * 0.1);
        
        currentOscillators.push(osc, lfo);
      });
    };

    const createPulsarBeats = (pulsesPerSecond: number, baseVolume: number) => {
      const interval = 1 / pulsesPerSecond;
      let pulseCount = 0;
      
      const createPulse = () => {
        if (!isPlaying) return;
        
        const osc = audioContext.createOscillator();
        const gain = audioContext.createGain();
        
        osc.connect(gain);
        gain.connect(gainNode);
        
        osc.frequency.setValueAtTime(800, audioContext.currentTime);
        osc.type = 'square';
        
        gain.gain.setValueAtTime(0, audioContext.currentTime);
        gain.gain.exponentialRampToValueAtTime(baseVolume, audioContext.currentTime + 0.01);
        gain.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.1);
        
        osc.start(audioContext.currentTime);
        osc.stop(audioContext.currentTime + 0.1);
        
        pulseCount++;
        if (pulseCount < 100) { // Limit to prevent infinite recursion
          setTimeout(createPulse, interval * 1000);
        }
      };
      
      createPulse();
    };

    const createMagnetosphereChorus = (frequencies: number[], baseVolume: number) => {
      frequencies.forEach((freq, index) => {
        const osc = audioContext.createOscillator();
        const gain = audioContext.createGain();
        const filter = audioContext.createBiquadFilter();
        
        osc.connect(filter);
        filter.connect(gain);
        gain.connect(gainNode);
        
        osc.type = 'sine';
        osc.frequency.setValueAtTime(freq, audioContext.currentTime);
        
        filter.type = 'highpass';
        filter.frequency.setValueAtTime(freq * 0.5, audioContext.currentTime);
        
        // Create chirping effect like real chorus waves
        const now = audioContext.currentTime;
        gain.gain.setValueAtTime(0, now);
        
        for (let i = 0; i < 10; i++) {
          const startTime = now + i * 2;
          gain.gain.setValueAtTime(0, startTime);
          gain.gain.linearRampToValueAtTime(baseVolume * 0.5, startTime + 0.5);
          gain.gain.linearRampToValueAtTime(0, startTime + 1.5);
          
          osc.frequency.setValueAtTime(freq, startTime);
          osc.frequency.exponentialRampToValueAtTime(freq * 2, startTime + 1);
        }
        
        osc.start(now);
        currentOscillators.push(osc);
      });
    };

    const createStormSounds = (frequencies: number[], baseVolume: number) => {
      frequencies.forEach((freq, index) => {
        const osc = audioContext.createOscillator();
        const gain = audioContext.createGain();
        const filter = audioContext.createBiquadFilter();
        
        osc.connect(filter);
        filter.connect(gain);
        gain.connect(gainNode);
        
        osc.type = 'triangle';
        osc.frequency.setValueAtTime(freq, audioContext.currentTime);
        
        filter.type = 'lowpass';
        filter.frequency.setValueAtTime(freq * 3, audioContext.currentTime);
        
        // Create storm-like rumbling with random variations
        const now = audioContext.currentTime;
        gain.gain.setValueAtTime(0, now);
        
        for (let i = 0; i < 20; i++) {
          const time = now + i * 0.5;
          const vol = baseVolume * (0.3 + Math.random() * 0.7);
          gain.gain.setValueAtTime(vol, time);
          
          const freqVar = freq * (0.8 + Math.random() * 0.4);
          osc.frequency.setValueAtTime(freqVar, time);
        }
        
        osc.start(now);
        currentOscillators.push(osc);
      });
    };

    const createVolcanicSounds = (frequencies: number[], baseVolume: number) => {
      frequencies.forEach((freq, index) => {
        const osc = audioContext.createOscillator();
        const gain = audioContext.createGain();
        
        osc.connect(gain);
        gain.connect(gainNode);
        
        osc.type = 'sawtooth';
        osc.frequency.setValueAtTime(freq, audioContext.currentTime);
        
        // Create volcanic rumbling with low frequency emphasis
        const now = audioContext.currentTime;
        gain.gain.setValueAtTime(0, now);
        gain.gain.linearRampToValueAtTime(baseVolume, now + 1);
        
        // Add random eruptions
        for (let i = 0; i < 8; i++) {
          const eruptTime = now + 2 + Math.random() * 10;
          gain.gain.setValueAtTime(baseVolume, eruptTime);
          gain.gain.exponentialRampToValueAtTime(baseVolume * 3, eruptTime + 0.1);
          gain.gain.exponentialRampToValueAtTime(baseVolume * 0.5, eruptTime + 0.5);
        }
        
        osc.start(now);
        currentOscillators.push(osc);
      });
    };

    const createInterstellarMedium = (frequencies: number[], baseVolume: number) => {
      frequencies.forEach((freq, index) => {
        const osc = audioContext.createOscillator();
        const gain = audioContext.createGain();
        const filter = audioContext.createBiquadFilter();
        
        osc.connect(filter);
        filter.connect(gain);
        gain.connect(gainNode);
        
        osc.type = 'sine';
        osc.frequency.setValueAtTime(freq, audioContext.currentTime);
        
        filter.type = 'bandpass';
        filter.frequency.setValueAtTime(freq, audioContext.currentTime);
        filter.Q.setValueAtTime(20, audioContext.currentTime);
        
        // Create ethereal, distant space sounds
        const now = audioContext.currentTime;
        gain.gain.setValueAtTime(0, now);
        gain.gain.linearRampToValueAtTime(baseVolume * 0.4, now + 2);
        
        // Slow frequency drift for interstellar effect
        osc.frequency.linearRampToValueAtTime(freq * 1.2, now + 15);
        
        osc.start(now);
        currentOscillators.push(osc);
      });
    };

    const createSolarWind = (frequencies: number[], baseVolume: number) => {
      frequencies.forEach((freq, index) => {
        const osc = audioContext.createOscillator();
        const gain = audioContext.createGain();
        const filter = audioContext.createBiquadFilter();
        
        osc.connect(filter);
        filter.connect(gain);
        gain.connect(gainNode);
        
        osc.type = 'sawtooth';
        osc.frequency.setValueAtTime(freq, audioContext.currentTime);
        
        filter.type = 'highpass';
        filter.frequency.setValueAtTime(freq * 0.3, audioContext.currentTime);
        
        // Create flowing wind-like effect
        const now = audioContext.currentTime;
        gain.gain.setValueAtTime(0, now);
        
        for (let i = 0; i < 15; i++) {
          const time = now + i * 0.8;
          const vol = baseVolume * (0.2 + Math.sin(i * 0.5) * 0.3);
          gain.gain.setValueAtTime(vol, time);
        }
        
        osc.start(now);
        currentOscillators.push(osc);
      });
    };

    const createGenericSpaceSound = () => {
      const osc = audioContext.createOscillator();
      const gain = audioContext.createGain();
      
      osc.connect(gain);
      gain.connect(gainNode);
      
      osc.type = 'sine';
      osc.frequency.setValueAtTime(220, audioContext.currentTime);
      
      gain.gain.setValueAtTime(0, audioContext.currentTime);
      gain.gain.linearRampToValueAtTime(0.1, audioContext.currentTime + 0.5);
      
      osc.start(audioContext.currentTime);
      currentOscillators.push(osc);
    };

    return {
      play: () => {
        if (!isPlaying) {
          isPlaying = true;
          generateCosmicSound();
        }
      },
      pause: () => {
        isPlaying = false;
        currentOscillators.forEach(osc => {
          try { osc.stop(); } catch(e) {}
        });
        currentOscillators = [];
      },
      get paused() { return !isPlaying; },
      set volume(val: number) {
        if (gainNode && audioContext) {
          gainNode.gain.setValueAtTime(val * 0.3, audioContext.currentTime);
        }
      },
      get volume() { return gainNode ? gainNode.gain.value : 0; }
    };
  };

  const initializeAudio = (sound: CosmicSound) => {
    if (!audioRefs.current.has(sound.id)) {
      const spaceAudio = createSpaceAudio(sound);
      audioRefs.current.set(sound.id, spaceAudio as any);
    }
  };

  useEffect(() => {
    // Initialize all audio elements
    cosmicSounds.forEach(initializeAudio);
    
    return () => {
      // Cleanup
      audioRefs.current.forEach(audio => {
        audio.pause();
        audio.removeEventListener('ended', () => {});
        audio.removeEventListener('pause', () => {});
      });
      audioRefs.current.clear();
    };
  }, []);

  useEffect(() => {
    // Update volume for all audio elements
    audioRefs.current.forEach(audio => {
      if (audio.volume !== undefined) {
        audio.volume = (volume / 100) * (isMuted ? 0 : 1);
      }
    });
  }, [volume, isMuted]);

  return (
    <div className={`space-sound-library ${className}`}>
      {/* Header */}
      <div className="text-center mb-8">
        <h2 className="text-3xl md:text-4xl font-bold mb-4">Cosmic Sound Library</h2>
        <p className="text-neutral-400 max-w-2xl mx-auto">
          Experience authentic sounds from space missions and cosmic phenomena. 
          All audio represents real data converted from electromagnetic waves and plasma measurements.
        </p>
      </div>

      {/* Controls */}
      <div className="flex flex-col sm:flex-row gap-4 mb-8 items-center justify-between">
        {/* Category Filter */}
        <div className="flex flex-wrap gap-2">
          {categories.map(category => (
            <Button
              key={category.id}
              variant={selectedCategory === category.id ? "default" : "outline"}
              size="sm"
              onClick={() => setSelectedCategory(category.id)}
              className="text-sm"
            >
              {category.label} ({category.count})
            </Button>
          ))}
        </div>

        {/* Volume Control */}
        <div className="flex items-center gap-3 min-w-[200px]">
          <Button
            variant="ghost"
            size="icon"
            onClick={() => setIsMuted(!isMuted)}
            className="text-neutral-400 hover:text-white"
          >
            {isMuted ? <VolumeX className="w-4 h-4" /> : <Volume2 className="w-4 h-4" />}
          </Button>
          <Slider
            value={[volume]}
            onValueChange={(value) => setVolume(value[0])}
            max={100}
            step={1}
            className="flex-1"
          />
          <span className="text-sm text-neutral-400 w-8">{volume}%</span>
        </div>
      </div>

      {/* Sound Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredSounds.map(sound => (
          <Card key={sound.id} className="bg-neutral-800 border-neutral-700 overflow-hidden group hover:bg-neutral-750 transition-colors">
            <div className="relative">
              <img
                src={sound.imageUrl}
                alt={sound.title}
                className="w-full h-32 object-cover"
              />
              <div className="absolute inset-0 bg-black/40 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity">
                <Button
                  size="icon"
                  variant="secondary"
                  onClick={() => playSound(sound.id)}
                  className="w-12 h-12 rounded-full bg-blue-600 hover:bg-blue-700 text-white"
                >
                  {currentlyPlaying === sound.id ? 
                    <Pause className="w-6 h-6" /> : 
                    <Play className="w-6 h-6 ml-1" />
                  }
                </Button>
              </div>
              <Badge className="absolute top-2 right-2 bg-blue-500/80 text-white text-xs">
                {sound.duration}
              </Badge>
            </div>

            <div className="p-4">
              <div className="flex items-start justify-between mb-2">
                <h3 className="font-semibold text-white group-hover:text-blue-400 transition-colors">
                  {sound.title}
                </h3>
                <Dialog>
                  <DialogTrigger asChild>
                    <Button variant="ghost" size="icon" className="text-neutral-400 hover:text-white">
                      <Info className="w-4 h-4" />
                    </Button>
                  </DialogTrigger>
                  <DialogContent className="bg-neutral-900 border-neutral-700 text-white max-w-2xl">
                    <DialogHeader>
                      <DialogTitle className="text-blue-400">{sound.title}</DialogTitle>
                    </DialogHeader>
                    <div className="space-y-4">
                      <img
                        src={sound.imageUrl}
                        alt={sound.title}
                        className="w-full h-48 object-cover rounded-lg"
                      />
                      <p className="text-neutral-300">{sound.scientificInfo}</p>
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 text-sm">
                        <div>
                          <span className="text-neutral-400">Recorded by:</span>
                          <p className="text-white">{sound.recordedBy}</p>
                        </div>
                        <div>
                          <span className="text-neutral-400">Frequency:</span>
                          <p className="text-white">{sound.frequency}</p>
                        </div>
                        <div>
                          <span className="text-neutral-400">Source Mission:</span>
                          <p className="text-white">{sound.source}</p>
                        </div>
                        <div>
                          <span className="text-neutral-400">Original Data:</span>
                          <p className="text-white">{sound.originalData}</p>
                        </div>
                      </div>
                    </div>
                  </DialogContent>
                </Dialog>
              </div>

              <p className="text-neutral-400 text-sm mb-3 line-clamp-2">
                {sound.description}
              </p>

              <div className="flex items-center justify-between">
                <Badge variant="outline" className="text-xs text-blue-400 border-blue-400">
                  {sound.source}
                </Badge>
                <div className="flex gap-2">
                  <Button
                    size="sm"
                    variant="ghost"
                    onClick={() => playSound(sound.id)}
                    className="text-blue-400 hover:text-blue-300"
                  >
                    {currentlyPlaying === sound.id ? (
                      <>
                        <Pause className="w-4 h-4 mr-1" />
                        Pause
                      </>
                    ) : (
                      <>
                        <Play className="w-4 h-4 mr-1" />
                        Play
                      </>
                    )}
                  </Button>
                </div>
              </div>
            </div>
          </Card>
        ))}
      </div>

      {/* Currently Playing Indicator */}
      {currentlyPlaying && (
        <div className="fixed bottom-4 right-4 bg-neutral-800 border border-neutral-700 rounded-lg p-4 shadow-lg">
          <div className="flex items-center gap-3">
            <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse"></div>
            <span className="text-sm text-white">
              Playing: {cosmicSounds.find(s => s.id === currentlyPlaying)?.title}
            </span>
            <Button
              size="icon"
              variant="ghost"
              onClick={() => playSound(currentlyPlaying)}
              className="text-neutral-400 hover:text-white"
            >
              <Pause className="w-4 h-4" />
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}